<?php

namespace MissionBundle\Repository;

use MissionBundle\Entity\UserMission;
use Doctrine\ORM\EntityRepository;
use MissionBundle\Entity\Mission;
use UserBundle\Entity\User;

/**
 * MissionRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MissionRepository extends EntityRepository
{
    public function getMissionsToScore()
    {
        // TODO : Exclude already SHORTLIST / FINALIST / etc missions
        $qb = $this->_em->createQueryBuilder();
        $qb->select('m')
            ->from('MissionBundle:Mission', 'm')
            ->where('m.status = '.Mission::PUBLISHED)
            ->join('m.steps', 's')
            ->andWhere('s.status = 1 and s.position = 1')
            ->andWhere('m.nextUpdateScoring <= :currentDate')
            ->setParameter("currentDate", date('Y-m-d'))
        ;
        return $qb->getQuery()->getResult();
    }

    public function getContractorMissions($companyId, $status)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('m')
        ->from('MissionBundle:Mission', 'm')
        ->where('m.company = :companyId')
            ->setParameter('companyId', $companyId)
        ->andWhere('m.status > :status')
            ->setParameter('status', $status);
        return $qb->getQuery()->getResult();
    }

    /**
     * A magic query that return a array of potential mission for a user
     * Need to refacto that shit, that burn my eyes
     *
     * @param \UserBundle\Entity\User $user
     *
     * @return Mission[]
     */
    public function getMissionByUser($user)
    {
        // select all mission at step one
        // left join necessary table
        $base = "SELECT   m
                FROM      MissionBundle:Mission m
                LEFT JOIN m.languages l
                LEFT JOIN m.businessPractice b
                LEFT JOIN m.professionalExpertise p
                LEFT JOIN m.missionKinds k
                LEFT JOIN m.userMission um
                WHERE     um.user = :user
                AND       um.status >= " . UserMission::SCORED ."
                AND       m.status = " . Mission::PUBLISHED;

        // add each user language in the query
        $i = 0;
        foreach ($user->getLanguages() as $oneLanguage) {
            if ($i)
                $base = $base . '
                OR        l = :userLanguage' . $i;
            else
                $base = $base . '
                AND       (l = :userLanguage' . $i;
            $i++;
        }
        // add each user practice in the query
        $i = 0;
        foreach ($user->getBusinessPractice() as $onePractice) {
            if ($i)
                $base = $base . '
                OR        b = :userPractice' . $i;
            else
                $base = $base . ')
                AND       (b = :userPractice' . $i;
            $i++;
        }
        // add each user expertise in the query
        $i = 0;
        foreach ($user->getProfessionalExpertise() as $oneExp) {
            if ($i)
                $base = $base . '
                OR        p = :userExp' . $i;
            else
                $base = $base . ')
                AND       (p = :userExp' . $i;
            $i++;
        }
        // add each user mission kind in the query
        $i = 0;
        foreach ($user->getMissionKind() as $oneKind) {
            if ($i)
                $base = $base . '
                OR        k = :userKind' . $i;
            else
                $base = $base . ')
                AND       (k = :userKind' . $i;
            $i++;
        }

        // add ordering method to the query
        $base  = $base . ')
         ORDER BY         m.applicationEnding DESC';
        $query = $this->_em->createQuery($base);

        // add parameters to the query
        $query->setParameter('user', $user);
        $i = 0;
        foreach ($user->getLanguages() as $oneLanguage) {
            $query->setParameter('userLanguage' . $i, $oneLanguage);
            $i++;
        }
        $i = 0;
        foreach ($user->getBusinessPractice() as $onePractice) {
            $query->setParameter('userPractice' . $i, $onePractice);
            $i++;
        }
        $i = 0;
        foreach ($user->getProfessionalExpertise() as $oneExp) {
            $query->setParameter('userExp' . $i, $oneExp);
            $i++;
        }
        $i = 0;
        foreach ($user->getMissionKind() as $oneKind) {
            $query->setParameter('userKind' . $i, $oneKind);
            $i++;
        }

        // return the result + the query
        return $query->getResult();
    }

    /**
     * @param Mission $mission
     * @return array
     */
    public function findUsersByMission(Mission $mission)
    {

//        query for the country
        $subQb = $this->_em->createQueryBuilder()
            ->select('a.country')
            ->from('ToolsBundle:Address', 'a')
            ->where('a.user = u.id')
            ->orderBy('a.id', 'desc')
            ->setMaxResults(1)
        ;

//        debug country selection
//        dump($subQb->getQuery());
//        die;


//      main query
        $qb = $this->_em->createQueryBuilder()
            ->select('u')
            ->from('UserBundle:User', 'u')
            ->join("u.languages", "l")
            ->join("u.professionalExpertise", "pe")
            ->leftJoin("u.missionKind", "mk")
            ->leftJoin("u.businessPractice", "bp")
            ->where("u.status = :userStatus")
            ->andWhere("u.roles = :userRoles")
            ->andWhere("l.id IN(:languageIds)")
            ->andWhere("pe = :professionalExpertise OR bp = :businessPractice")
            ->andWhere("((u.dailyFeesMin + u.dailyFeesMax)/2.0) <= :missionBudget")
        ;

        $parameters = [
            "userRoles" => "a:1:{i:0;s:12:\"ROLE_ADVISOR\";}",
            "languageIds" => $mission->getLanguages()->toArray(),
            "professionalExpertise" => $mission->getProfessionalExpertise(),
            "businessPractice" => $mission->getBusinessPractice(),
            "missionBudget" => $mission->getPrice(),
            "userStatus" => User::REGISTER_NO_STEP
        ];


        if ($mission->getTelecommuting()) {
            $qb->andWhere("u.remoteWork = 1 OR :missionCountry = (" . $subQb . ")");
            $parameters += ["missionCountry" => $mission->getAddress()->getCountry()];
        }

//        debug parameters
//        dump($parameters);

        $qb->setParameters($parameters);
        $qb->groupBy("u.id");
        $qb->orderBy("u.id", "asc");

//        debug query
//        dump($qb->getQuery()->getResult());
//        die;

        return $qb->getQuery()->getResult();
    }

    /**
     * Retunr next mission assiocated to the company
     * (next btn)
     *
     * @param integer $missionId
     * @param         $company
     * @return integer | null
     */
    public function findNextMission($missionId, $company)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('m.id')
            ->from('MissionBundle:Mission', 'm')
            ->where('m.id > '.$missionId)
            ->andWhere('m.company = :company')
            ->setParameter("company", $company)
            ->andWhere('m.status = :published')
            ->setParameter("published", Mission::PUBLISHED)
            ->orderBy('m.id', 'ASC')
            ->setMaxResults(1)
        ;

        return $qb->getQuery()->getOneOrNullResult();

    }

    /**
     * Retun prev mission associated to the company
     * (prev btn)
     *
     * @param integer $missionId
     * @param         $company
     * @return integer | null
     */
    public function findPrevMission($missionId, $company)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('m.id')
            ->from('MissionBundle:Mission', 'm')
            ->where('m.id < '.$missionId)
            ->andWhere('m.company = :company')
            ->setParameter("company", $company)
            ->andWhere('m.status = :published')
            ->setParameter("published", Mission::PUBLISHED)
            ->orderBy('m.id', 'DESC')
            ->setMaxResults(1)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @return array
     */
    public function findMissionToUpdate()
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('m')
            ->from('MissionBundle:Mission', 'm')
            ->where('m.status = '.Mission::PUBLISHED)
            ->andWhere('m.applicationEnding > :today')
            ->setParameter("today", new \DateTime())
        ;

        return $qb->getQuery()->getResult();
    }
}
