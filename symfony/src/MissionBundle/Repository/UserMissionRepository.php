<?php

namespace MissionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MissionBundle\Entity\UserMission;

/**
 * UserMissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserMissionRepository extends EntityRepository
{
    public function findOrderedByMission($mission, $max)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->where('t.mission = :mission')
                ->setParameter('mission', $mission)
            // NOTE : Status position...?
            // ->andWhere('t.status = :position')
            //     ->setParameter('position', $step->getPosition());
            ->orderBy("t.score", "desc");
        if ($max) {
            $qb->setMaxResults($max);
        }
        return $qb->getQuery()->getResult();
    }

    // Query get users availables for a specific step
    //$full is a boolean : false => getAvailablesUsers; true => get All availables users in Array form.
    public function getAvailablesUsers($missionId, $step, $arrayForm)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->leftjoin('t.mission', 'm')
            ->where('m.id = :missionId')
                ->setParameter('missionId', $missionId)
            ->andWhere('t.status = :position')
                ->setParameter('position', $step->getPosition());
        if ($arrayForm == true) {
            $qb->orderBy('t.creationDate', 'ASC')
                ->setMaxResults($step->getNbMaxUser());
            return $qb;
        }
        return $qb->getQuery()->getResult();
    }

    public function getMyMissions($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->leftjoin('t.user', 'u')
            ->leftjoin('t.mission', 'm')
            ->where('u.id = :userId')
                ->setParameter('userId', $userId)
            ->andWhere('t.status != :status1')
                ->setParameter('status1', UserMission::NEW)
            ->andWhere('t.status != :status2')
                ->setParameter('status2', UserMission::REFUSED)
            ->orderBy('m.applicationEnding', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function getMyOldMissions($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->leftjoin('t.user', 'u')
            ->leftjoin('t.mission', 'm')
            ->where('u.id = :userId')
                ->setParameter('userId', $userId)
            ->andWhere('t.status < :status')
                ->setParameter('status', UserMission::NEW)
            ->orderBy('m.applicationEnding', 'ASC');
        return $qb->getQuery()->getResult();
    }
}
