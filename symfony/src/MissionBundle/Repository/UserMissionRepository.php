<?php

namespace MissionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MissionBundle\Entity\UserMission;

/**
 * UserMissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserMissionRepository extends EntityRepository
{
    public function findOrderedByMission($mission, $maxResult, $minScore)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->join('t.mission', 'm')
            ->join('m.steps', 's')
            ->where('t.mission = :mission')
                ->setParameter('mission', $mission)
            ->andWhere('t.status = '.UserMission::SCORED)
            ->andWhere('s.status = 1 and s.position = 1')
            ->andWhere("t.score >= ".$minScore)
            ->orderBy("t.score", "desc");
        if ($maxResult) {
            $qb->setMaxResults($maxResult);
        }
        return $qb->getQuery()->getResult();
    }

    // Query get users availables for a specific step
    //$full is a boolean : false => getAvailablesUsers; true => get All availables users in Array form.
    /**
     * Query get users availables for a specific step
     * $full is a boolean : false => getAvailablesUsers; true => get All availables users in Array form.
     *
     * @param $missionId
     * @param \MissionBundle\Entity\Step $step
     * @param $arrayForm
     * @return array|\Doctrine\ORM\QueryBuilder
     */
    public function getAvailablesUsers($missionId, $step, $arrayForm)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->leftjoin('t.mission', 'm')
            ->where('m.id = :missionId')
                ->setParameter('missionId', $missionId)
            ->andWhere('t.status = :position')
                ->setParameter('position', $step->getPosition());
        if ($arrayForm == true) {
            $qb->orderBy('t.creationDate', 'ASC')
                ->setMaxResults($step->getNbMaxUser());
            return $qb;
        }
        return $qb->getQuery()->getResult();
    }

    public function getMyOldMissions($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->leftjoin('t.user', 'u')
            ->leftjoin('t.mission', 'm')
            ->where('u.id = :userId')
                ->setParameter('userId', $userId)
            ->andWhere('t.status < :status')
                ->setParameter('status', UserMission::SCORED)
            ->orderBy('m.applicationEnding', 'ASC');
        return $qb->getQuery()->getResult();
    }

    /**
     * @param \MissionBundle\Entity\Mission $mission
     * @param $status
     * @return array
     */
    public function findAllAtLeastThan($mission, $status)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('um')
            ->from('MissionBundle:UserMission', 'um')
            ->leftjoin('um.mission', 'm')
            ->where('m.id = :mId')
            ->setParameter('mId', $mission->getId())
            ->andWhere('um.status >= :status')
            ->setParameter('status', $status)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $user
     * @return array
     */
    public function findAllNewMission($user)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('um')
            ->from('MissionBundle:UserMission', 'um')
            ->leftjoin('um.mission', 'm')
            ->where('um.user = :user')
            ->setParameter('user', $user)
            ->andWhere('um.status = ' . UserMission::MATCHED)
            ->andWhere('m.nbOngoing < 10')
        ;

        return $qb->getQuery()->getResult();
    }

    public function getMyMissions($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('MissionBundle:UserMission', 't')
            ->leftjoin('t.user', 'u')
            ->leftjoin('t.mission', 'm')
            ->where('u.id = :userId')
            ->setParameter('userId', $userId)
            ->andWhere('t.status >= ' . UserMission::INTERESTED)
            ->orderBy('m.applicationEnding', 'ASC');
        return $qb->getQuery()->getResult();
    }

    public function findUserMissionByCompanyAndUser($missionId, $userId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb
            ->select('um')
            ->from('MissionBundle:UserMission', 'um')
            ->leftjoin('um.mission', 'm')
            ->where('um.user = ' . $userId)
            ->andWhere('m.id = ' . $missionId)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }
}
