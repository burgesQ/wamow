<?php

namespace TeamBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeamRepository extends EntityRepository
{
    // Query get all advisors teams in a mission
    public function getAdvisorsTeams($missionId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('TeamBundle:Team', 't')
            ->leftjoin('t.mission', 'm')
            ->where('m.id = :missionId')
                ->setParameter('missionId', $missionId)
            ->andWhere('t.role = 0');
        return $qb->getQuery()->getResult();
    }

    // Query get team of for a user and a specific mission
    public function getTeamByMissionAndUser($missionId, $userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t', 'x')
            ->from('TeamBundle:Team', 't')
            ->leftjoin('t.mission', 'm')
            ->leftjoin('t.users', 'u')
            ->leftjoin('t.users', 'x')
            ->where('m.id = :missionId')
            ->setParameter('missionId', $missionId)
            ->andwhere('u.id = :userId')
            ->setParameter('userId', $userId);
        return $qb->getQuery()->getResult()[0];
    }

    // Query get team of for and a specific mission
    public function getTeamByMission($missionId)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('t')
            ->from('TeamBundle:Team', 't')
            ->leftjoin('t.mission', 'm')
            ->where('m.id = :missionId')
            ->setParameter('missionId', $missionId)
            ->orderBy('t.creationDate', 'ASC')
        ;

        return $qb->getQuery()->getResult();
    }

    // Query get teams availables for a specific step
    //$full is a boolean : false => getAvailablesTeams; true => get All availables teams in Array form.
    public function getAvailablesTeams($missionId, $step, $arrayForm)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('TeamBundle:Team', 't')
            ->leftjoin('t.mission', 'm')
            ->where('m.id = :missionId')
                ->setParameter('missionId', $missionId)
            ->andWhere('t.role = 0')
            ->andWhere('t.status = :position')
                ->setParameter('position', $step->getPosition());
        if ($step->getPosition() == 1) {
            $qb->orWhere('t.status = 0');
        }
        if ($arrayForm == false)
        {
            $qb->orderBy('t.creationDate', 'ASC')
                ->setMaxResults($step->getNbMaxTeam());
            return $qb->getQuery()->getResult();
        }
        return $qb->getQuery()->getArrayResult();
    }

    // Query get teams of users
    public function getTeamsByUserId($userId)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('TeamBundle:Team', 't')
            ->leftjoin('t.users', 'u')
            ->leftjoin('t.mission', 'm')
            ->where('u.id = :userId')
                ->setParameter('userId', $userId)
            ->andWhere('m.status >= 0');
        return $qb->getQuery()->getResult();
    }

    // Query get teams for form
    public function getTeamsForForm($missionId, $position)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('t')
            ->from('TeamBundle:Team', 't')
            ->leftjoin('t.mission', 'm')
            ->where('m.id = :missionId')
                ->setParameter('missionId', $missionId)
            ->andWhere('t.role = 0')
            ->andWhere('t.status = :position')
                ->setParameter('position', $position)
            ->orderBy('t.creationDate', 'ASC');
        return $qb;
    }
}
